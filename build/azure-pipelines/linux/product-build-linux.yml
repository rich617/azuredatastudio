steps:
- script: |
    set -e
    sudo apt-get update
    sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libkrb5-dev #{{SQL CARBON EDIT}} add kerberos dep
    sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
    sudo chmod +x /etc/init.d/xvfb
    sudo update-rc.d xvfb defaults
    sudo service xvfb start
- script: |
    mkdir -p .build
    echo -n $BUILD_SOURCEVERSION > .build/commit
    echo -n $VSCODE_QUALITY > .build/quality
  displayName: Prepare cache flag

- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
  inputs:
    keyfile: 'build/.cachesalt, .build/commit, .build/quality'
    targetfolder: '.build, out-build, out-vscode-min, out-vscode-reh-min, out-vscode-reh-web-min'
    vstsFeed: 'npm-cache'
    platformIndependent: true
    alias: 'Compilation'

- script: |
    set -e
    exit 1
  displayName: Check RestoreCache
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

- task: NodeTool@0
  inputs:
    versionSpec: "10.15.1"

- task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@3 # {{SQL CARBON EDIT}} update version
  inputs:
    versionSpec: "1.x"

- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: Get Secrets'
  inputs:
    azureSubscription: 'azuredatastudio-adointegration'
    KeyVaultName: ado-secrets

- script: |
    set -e
    cat << EOF > ~/.netrc
    machine github.com
    login vscode
    password $(github-distro-mixin-password)
    EOF

    git config user.email "vscode@microsoft.com"
    git config user.name "VSCode"
  displayName: Prepare tooling

- script: |
    set -e
    git remote add distro "https://github.com/$(VSCODE_MIXIN_REPO).git"
    git fetch distro
    git merge $(node -p "require('./package.json').distro")
  displayName: Merge distro

- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
  inputs:
    keyfile: 'build/.cachesalt, .yarnrc, remote/.yarnrc, **/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock, !samples/**/yarn.lock'
    targetfolder: '**/node_modules, !**/node_modules/**/node_modules, !samples/**/node_modules'
    vstsFeed: 'npm-cache'

- script: |
    set -e
    CHILD_CONCURRENCY=1 yarn --frozen-lockfile
  displayName: Install dependencies
  condition: and(succeeded(), ne(variables['CacheRestored'], 'true'))

- task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
  inputs:
    keyfile: 'build/.cachesalt, .yarnrc, remote/.yarnrc, **/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock, !samples/**/yarn.lock'
    targetfolder: '**/node_modules, !**/node_modules/**/node_modules, !samples/**/node_modules'
    vstsFeed: 'npm-cache'
  condition: and(succeeded(), ne(variables['CacheRestored'], 'true'))

- script: |
    set -e
    yarn postinstall
  displayName: Run postinstall scripts
  condition: and(succeeded(), eq(variables['CacheRestored'], 'true'))

- script: |
    set -e
    node build/azure-pipelines/mixin
  displayName: Mix in quality

- script: |
    set -e
    VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
      yarn gulp vscode-linux-x64-min-ci
    VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
      yarn gulp vscode-reh-linux-x64-min-ci
    VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
      yarn gulp vscode-reh-web-linux-x64-min-ci
  displayName: Build

- script: |
    set -e
    sudo service xvfb start
  displayName: Start xvfb
  condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

- script: |
    set -e
    DISPLAY=:10 ./scripts/test.sh --build --tfs "Unit Tests"
  displayName: Run unit tests
  condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

# - script: |
#     # Figure out the full absolute path of the product we just built
#     # including the remote server and configure the integration tests
#     # to run with these builds instead of running out of sources.
#     set -e
#     APP_ROOT=$(agent.builddirectory)/azuredatastudio-linux-x64
#     APP_NAME=$(node -p "require(\"$APP_ROOT/resources/app/product.json\").applicationName")
#     INTEGRATION_TEST_ELECTRON_PATH="$APP_ROOT/$APP_NAME" \
#     VSCODE_REMOTE_SERVER_PATH="$(agent.builddirectory)/vscode-reh-linux-x64" \
#     DISPLAY=:10 ./scripts/sql-test-integration.sh --build --tfs "Integration Tests"
#     # yarn smoketest -- --build "$(agent.builddirectory)/VSCode-linux-x64"
#   displayName: Run integration tests
#   condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

# - script: |
#     set -e
#     AZURE_DOCUMENTDB_MASTERKEY="$(builds-docdb-key-readwrite)" \
#     AZURE_STORAGE_ACCESS_KEY_2="$(vscode-storage-key)" \
#     VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
#     VSCODE_HOCKEYAPP_TOKEN="$(vscode-hockeyapp-token)" \
#     ./build/azure-pipelines/linux/publish.sh
#   displayName: Publish

# - task: PublishPipelineArtifact@0
#   displayName: 'Publish Pipeline Artifact'
#   inputs:
#     artifactName: snap-x64
#     targetPath: .build/linux/snap-tarball

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  continueOnError: true

steps:
- script: |
    set -e
    sudo apt-get update
    sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libkrb5-dev #{{SQL CARBON EDIT}} add kerberos dep
    sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
    sudo chmod +x /etc/init.d/xvfb
    sudo update-rc.d xvfb defaults
    sudo service xvfb start
- script: |
    mkdir -p .build
    echo -n $BUILD_SOURCEVERSION > .build/commit
    echo -n $VSCODE_QUALITY > .build/quality
  displayName: Prepare cache flag

- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
  inputs:
    keyfile: 'build/.cachesalt, .build/commit, .build/quality'
    targetfolder: '.build, out-build, out-vscode-min, out-vscode-reh-min, out-vscode-reh-web-min'
    vstsFeed: 'npm-cache'
    platformIndependent: true
    alias: 'Compilation'

- task: NodeTool@0
  inputs:
    versionSpec: "10.15.1"
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

- task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@3 # {{SQL CARBON EDIT}} update version
  inputs:
    versionSpec: "1.x"
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: Get Secrets'
  inputs:
    azureSubscription: 'azuredatastudio-adointegration'
    KeyVaultName: ado-secrets
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

- script: |
    set -e
    cat << EOF > ~/.netrc
    machine github.com
    login vscode
    password $(github-distro-mixin-password)
    EOF

    git config user.email "vscode@microsoft.com"
    git config user.name "VSCode"
  displayName: Prepare tooling
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

- script: |
    set -e
    git remote add distro "https://github.com/$(VSCODE_MIXIN_REPO).git"
    git fetch distro
    git merge $(node -p "require('./package.json').distro")
  displayName: Merge distro
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
  inputs:
    keyfile: 'build/.cachesalt, .yarnrc, remote/.yarnrc, **/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock, !samples/**/yarn.lock'
    targetfolder: '**/node_modules, !**/node_modules/**/node_modules, !samples/**/node_modules'
    vstsFeed: 'npm-cache'
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

- script: |
    set -e
    CHILD_CONCURRENCY=1 yarn --frozen-lockfile
  displayName: Install dependencies
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'), ne(variables['CacheRestored'], 'true'))

- task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
  inputs:
    keyfile: 'build/.cachesalt, .yarnrc, remote/.yarnrc, **/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock, !samples/**/yarn.lock'
    targetfolder: '**/node_modules, !**/node_modules/**/node_modules, !samples/**/node_modules'
    vstsFeed: 'npm-cache'
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'), ne(variables['CacheRestored'], 'true'))

- script: |
    set -e
    yarn postinstall
  displayName: Run postinstall scripts
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'), eq(variables['CacheRestored'], 'true'))

# Mixin must run before optimize, because the CSS loader will
# inline small SVGs
- script: |
    set -e
    node build/azure-pipelines/mixin
  displayName: Mix in quality
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

- script: |
    set -e
    yarn gulp hygiene --skip-tslint
    yarn gulp tslint
    # yarn monaco-compile-check
  displayName: Run hygiene, tslint and monaco compile checks
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

# - script: |
#     set -
#     ./build/azure-pipelines/common/extract-telemetry.sh
#   displayName: Extract Telemetry
#   condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

# - script: |
#     set -e
#     AZURE_WEBVIEW_STORAGE_ACCESS_KEY="$(vscode-webview-storage-key)" \
#     ./build/azure-pipelines/common/publish-webview.sh
#   displayName: Publish Webview
#   condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

- script: |
    set -e
    yarn gulp compile-build
    yarn gulp compile-extensions-build
    yarn gulp minify-vscode
    yarn gulp minify-vscode-reh
    yarn gulp minify-vscode-reh-web
  displayName: Compile
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

# - script: |
#     set -e
#     AZURE_STORAGE_ACCESS_KEY="$(ticino-storage-key)" \
#       node build/azure-pipelines/upload-sourcemaps
#   displayName: Upload sourcemaps
#   condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))

- task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
  inputs:
    keyfile: 'build/.cachesalt, .build/commit, .build/quality'
    targetfolder: '.build, out-build, out-vscode-min, out-vscode-reh-min, out-vscode-reh-web-min'
    vstsFeed: 'npm-cache'
    platformIndependent: true
    alias: 'Compilation'
  condition: and(succeeded(), ne(variables['CacheRestored-Compilation'], 'true'))
